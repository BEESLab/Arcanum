>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d21416aa51 <String[16]: "chrome://newtab/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d21416a859 <String[7]: "New Tab">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d21417b8b1 <String[16]: "chrome://newtab/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d21417b881 <String[7]: "New Tab">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d21417d589 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d21417d559 <String[8]: "LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d21417eff1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d21417efc1 <String[8]: "LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9816e1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9816b1 <String[8]: "LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f982931 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f982901 <String[8]: "LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9840f9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9840c9 <String[8]: "LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f985349 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f985319 <String[8]: "LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f986599 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f986569 <String[8]: "LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9877e9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9877b9 <String[8]: "LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f988a49 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f988a19 <String[8]: "LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f98a509 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f98a4d9 <String[8]: "LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f98b9a1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f98b971 <String[8]: "LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f98cc11 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f98cbe1 <String[8]: "LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f98de81 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f98de51 <String[8]: "LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f98f0f1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f98f0c1 <String[8]: "LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f990361 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f990331 <String[8]: "LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9915d1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9915a1 <String[8]: "LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f992841 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f992811 <String[8]: "LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f997061 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f997031 <String[8]: "LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f998599 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f998561 <String[13]: "(25) LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f999811 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9997d9 <String[13]: "(25) LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f99bf01 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f99bec9 <String[13]: "(25) LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f99d179 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f99d141 <String[13]: "(25) LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f99e3f1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f99e3b9 <String[13]: "(25) LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f99f669 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f99f631 <String[13]: "(25) LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9a08e9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9a08a9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9a3819 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9a37d9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9a4d59 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9a4d19 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9a5fd9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9a5f99 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9a7259 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9a7219 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9a84d9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9a8499 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9a9759 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9a9719 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9aa9d9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9aa999 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9abc59 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9abc19 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9aced9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9ace99 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9ae159 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9ae119 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9af3d9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9af399 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9b0659 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9b0619 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9b18d9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9b1899 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9b2b59 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9b2b19 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9b3dd9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9b3d99 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9b5059 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9b5019 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9b8329 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9b82e9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9b9dd1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9b9d91 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9bb051 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9bb011 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9bc2d1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9bc291 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9bd551 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9bd511 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9be7d1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9be791 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f9bfa51 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9bfa11 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a41e01 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a41dc1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a43081 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a43041 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a44301 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a442c1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a45581 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a45541 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a46801 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a467c1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a47a81 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a47a41 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a48d01 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a48cc1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a49f81 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a49f41 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a4b201 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a4b1c1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a4c481 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a4c441 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a4d701 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a4d6c1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a4e981 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a4e941 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a4fc01 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a4fbc1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a50e81 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a50e41 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a52101 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a520c1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a53381 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a53341 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a54601 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a545c1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a55881 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a55841 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a56b01 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a56ac1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a57d81 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a57d41 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a59001 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a58fc1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a5a281 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a5a241 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a5b501 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a5b4c1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a5c781 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a5c741 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a5da01 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a5d9c1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a5ec81 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a5ec41 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a5ff01 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a5fec1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a61181 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a61141 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a62401 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a623c1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a63681 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a63641 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a64901 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a648c1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a65b81 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a65b41 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a66e01 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a66dc1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a68081 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a68041 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a69301 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a692c1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a6a581 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a6a541 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a70879 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a70839 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a71af9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a71ab9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a72d79 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a72d39 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a73ff9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a73fb9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a75279 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a75239 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a764f9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a764b9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a77779 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a77739 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a789f9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a789b9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a79c79 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a79c39 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a7aef9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a7aeb9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a7c179 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a7c139 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a7d3f9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a7d3b9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a7e679 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a7e639 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1346f8a7f8f9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1346f8a7f8b9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x038ebe141e01 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x038ebe141dc1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x038ebe143081 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x038ebe143041 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x038ebe144301 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x038ebe1442c1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x038ebe145581 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x038ebe145541 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x038ebe1470b9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x038ebe147079 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x038ebe148339 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x038ebe1482f9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x038ebe1495b9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x038ebe149579 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x038ebe14fec9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x038ebe14fe89 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d4b8a1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d4b861 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d4df39 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d4def9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d4f1b9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d4f179 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d52429 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d523e9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d536a9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d53669 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d54929 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d548e9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d55ba9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d55b69 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d56e29 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d56de9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d580a9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d58069 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d59329 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d592e9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d5a5a9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d5a569 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d5b829 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d5b7e9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d5caa9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d5ca69 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d5dd29 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d5dce9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d5efa9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d5ef69 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d60229 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d601e9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d637d1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d63791 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d64a51 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d64a11 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d65cd1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d65c91 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d66f51 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d66f11 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d681d1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d68191 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d6a2f9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d6a2b9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d6b849 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d6b809 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d6e249 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d6e209 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d70341 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d70301 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d715c1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d71581 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d72841 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d72801 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d73d91 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d73d51 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d75011 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d74fd1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d76291 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d76251 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d77ab1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d77a71 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d78d31 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d78cf1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d79fb1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d79f71 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d7b231 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d7b1f1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d7c4b1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d7c471 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d7e911 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d7e8d1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x05ffb6d7fb91 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x05ffb6d7fb51 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from blink)
0x11b449026779 <String[39]: e"https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba1e8 ``, source code:
const ALLOW_ALL = true;
const MAX_DEPTH = 0;

var allowed_sites = [];
var prohibit_tag = ["script", "style", "noscript"];
var delim = '`!@!$`';

var eList = [];
var eListContent = [];

var cwTexts = [];
var cwScores = [];
var cwSentences = [];

var gResults = [];

function allowed(str) {
    if (ALLOW_ALL) {
        return true;
    }

    for (var i = 0; i < allowed_sites.length; i++)
        if (str.toLowerCase().includes(allowed_sites[i].toLowerCase()))
            return true;

    return false;
}

function prohibited(str) {
    for (var i=0; i<prohibit_tag.length; i++) {
        if (str.toLowerCase().includes(prohibit_tag[i].toLocaleString()))
            return true;
    }
    return false;
}

function count_maximum_depth(el) {
    var ret = 0;
    if (prohibited(el.tagName)) ret = 100; // arbitrary large number

    var c = el.children;
    for (var i=0; i<c.length; i++) {
        ret = Math.max(count_maximum_depth(c[i]) + 1, ret);
    }

    return ret;
}

function createCORSRequest(method, url, api_key=null) {
    var xhr = new XMLHttpRequest();
    xhr.open(method, url);
    if (method == "POST") {
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    }
    return xhr;
}

function applyClaimSpottingAPI(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}

function applyGoogleAPI() {
    var url = "https://idir.uta.edu/misinfo-api/query_google";

    var tot = "";
    for (var i=0; i<cwSentences.length; i++) {
        tot += cwSentences[i];
        if (i < cwSentences.length - 1) tot += "$&@!@&!*";
    }
    
    var xhr = createCORSRequest('POST', url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }
  
    xhr.onload = function() {
        gResults = JSON.parse(xhr.responseText);

        var retIdx = 0;
        for (var i = 0; i < cwScores.length; i++) {
            var curHTML = eListContent[i];
            for (var j = 0; j < cwScores[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                var curRes = gResults[retIdx++];

                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);

                var startColor = (curRes.empty ? "fce3ec" : "00ff66");
                var endColor = (curRes.empty ? "ffe8cc" : "00d4ff");
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#" + startColor + tCode + "), to(#" + endColor + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";

                var tooltipHTML = '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%';

                if (!curRes.empty) {
                    var googleFcURL = "https://toolbox.google.com/factcheck/explorer/search/" + fixedEncodeURIComponent(cwTexts[i][j]) + ";hl=en";
                    tooltipHTML = '<a target="_blank" href="' + googleFcURL + '">' + tooltipHTML + '. Click me to see relevant fact-checks!</span>' + '</a>';
                } else {
                    tooltipHTML += '</span>';
                }

                newHTML = '<div class="tooltip-vericlaim">' + newHTML + tooltipHTML + '</div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }
    };
  
    xhr.onerror = function() {
        console.log('There was an error making the request');
    };
  
    xhr.send(tot);
}

function processClaimCheckingResults(csListener, badgeLenListener) {
    if (gResults.length != cwSentences.length) {
        setTimeout(processClaimCheckingResults, 200, csListener, badgeLenListener);
        return;
    }

    console.log(gResults);

    var ccListener = function (msg, sender, response) {
        if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
            response({
                id: '200-cc',
                cwSentences: cwSentences,
                gResults: gResults
            });
        }
    }
    chrome.runtime.onMessage.removeListener(csListener);
    chrome.runtime.onMessage.addListener(ccListener);

    var badgeLenCcListener = function (msg, sender, response) {
        if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
            response({
                id: "200-cc",
                content: cwSentences.length
            });
        }
    }
    chrome.runtime.onMessage.removeListener(badgeLenListener);
    chrome.runtime.onMessage.addListener(badgeLenCcListener);
}

var threshold;
var viewmode;

chrome.storage.sync.get(['threshold'], function(result) {
    if (result.threshold == undefined) {
        chrome.storage.sync.set({threshold: 0.6}, function() {});
        threshold = 0.6;
    } else {
        threshold = result.threshold;
    }
});

function get_candidate_claims(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}

if (allowed(document.URL)) {
    console.log("COKN Health Info Check will operate on this site")

    respondLoading = function(msg, sender, response) {
        if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
            response({
                id: 'loading-cs',
                cwSentences: [],
                gResults: []
            });
        }
    }
    chrome.runtime.onMessage.addListener(respondLoading);

    var badgeLenLoading = function (msg, sender, response) {
        if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
            response({
                id: "-1",
                content: []
            });
        }
    }
    chrome.runtime.onMessage.addListener(badgeLenLoading);

    var style = document.createElement('style');
    style.innerHTML = `
    claim {
        -webkit-box-decoration-break: clone;
        box-decoration-break: clone;
        border-radius: .4em;
        padding-left: .15em;
        padding-right: .15em;
        padding-top: .05em;
        padding-bottom: .05em;
        color: black;
    }
    /* Tooltip container */
    .tooltip-vericlaim {
        position: relative;
        display: inline;
    }

    /* Tooltip text */
    .tooltip-vericlaim .tooltiptext-vericlaim {
        visibility: hidden;
        width: 20em;
        background-color: black;
        color: #fff;
        text-align: center;
        padding: 5px 0;
        border-radius: 6px;
        font-size: 10pt;
        font-weight: bold;
        
        /* Position the tooltip text - see examples below! */
        position: absolute;
        z-index: 9999;
    }

    /* Show the tooltip text when you mouse over the tooltip container */
    .tooltip-vericlaim:hover .tooltiptext-vericlaim {
        visibility: visible;
    }
    `;

    // style.innerHTML = `
    // .has-tooltip {
    //     /*position: relative;*/
    //     display: inline;
    // }
    // .tooltip-wrapper {
    //     position: absolute;
    //     visibility: hidden;
    // }
    // .has-tooltip:hover .tooltip-wrapper {
    //     visibility: visible;
    //     opacity: 0.7;
    //     /*top: 30px;*/
    //     /*left: 50%;*/
    //     /*margin-left: -76px;*/
    //     z-index: 9999;
    // }
    
    // .tooltip {
    //     display: block;
    //     position: relative;
    //     top: 2em;
    //     right: 100%;
    //     width: 140px;
    //     height: 96px;
    //     /*margin-left: -76px;*/
    //     color: #FFFFFF;
    //     background: #000000;
    //     line-height: 96px;
    //     text-align: center;
    //     border-radius: 8px;
    //     box-shadow: 4px 3px 10px #800000;
    // }
    // .tooltip:after {
    //     content: '';
    //     position: absolute;
    //     bottom: 100%;
    //     left: 50%;
    //     margin-left: -8px;
    //     width: 0;
    //     height: 0;
    //     border-bottom: 8px solid #000000;
    //     border-right: 8px solid transparent;
    //     border-left: 8px solid transparent;
    // }    
    // `

    document.head.appendChild(style);

    eList = get_candidate_claims(document.body.querySelectorAll('*:not(style):not(script):not(noscript)'));
    applyClaimSpottingAPI(respondLoading, badgeLenLoading);
} else {
    chrome.runtime.onMessage.addListener((msg, sender, response) => {
        if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
            response({
                id: 'not-support',
                cwSentences: [],
                gResults: []
            });
        }
    });
}

function fixedEncodeURIComponent(str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return '%' + c.charCodeAt(0).toString(16);
    });
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x11b449004629 <String[21]: e"0 notifications total">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x11b449004709 <String[21]: e"0 notifications total">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd783249 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd783209 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e595b39 <String[26]: e"\n          Search\n        ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e595b59 <String[26]: e"\n          Search\n        ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e595bc1 <String[4]: e"Home">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e595be1 <String[4]: e"Home">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e595c41 <String[10]: e"My Network">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e595c61 <String[10]: e"My Network">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e595c81 <String[4]: e"Jobs">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e595ca1 <String[4]: e"Jobs">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e595cc1 <String[9]: e"Messaging">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e595ce1 <String[9]: e"Messaging">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e595d41 <String[13]: e"Notifications">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e595d61 <String[13]: e"Notifications">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e595e19 <String[17]: e"\n      \n    \n    ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e595e39 <String[17]: e"\n      \n    \n    ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd7844c9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd784489 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd785749 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd785709 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd7869c9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd786989 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e595ea9 <String[7]: e"Amy Lee">
** In function 0x2750002ba298 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e595ec9 <String[7]: e"Amy Lee">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e595ee9 <String[9]: e"(She/Her)">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e595f09 <String[9]: e"(She/Her)">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e595f29 <String[29]: e"Marketing Intern at Microsoft">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e595f49 <String[29]: e"Marketing Intern at Microsoft">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e595f69 <String[9]: e"Microsoft">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e595f89 <String[9]: e"Microsoft">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e595fa9 <String[31]: e"Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e595fc9 <String[31]: e"Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e595fe9 <String[37]: ue"Douglasville, Georgia, United States ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596009 <String[37]: ue"Douglasville, Georgia, United States ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596051 <String[12]: e"Contact info">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596071 <String[12]: e"Contact info">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5960b9 <String[7]: e"Open to">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5960d9 <String[7]: e"Open to">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5960f9 <String[19]: e"Add profile section">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596119 <String[19]: e"Add profile section">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596139 <String[4]: e"More">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596159 <String[4]: e"More">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596179 <String[26]: e"\n    \n          \n        \n">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596199 <String[26]: e"\n    \n          \n        \n">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5961b9 <String[12]: e"Open to work">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5961d9 <String[12]: e"Open to work">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596221 <String[26]: e"Marketing Specialist roles">
** In function 0x2750002ba298 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596241 <String[26]: e"Marketing Specialist roles">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596261 <String[12]: e"Show details">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596281 <String[12]: e"Show details">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5962a1 <String[4]: e"Edit">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5962c1 <String[4]: e"Edit">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5962e1 <String[24]: ue"Share that you\x2019re hiring">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596301 <String[24]: ue"Share that you\x2019re hiring">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596321 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596341 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596361 <String[11]: e"Get started">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596381 <String[11]: e"Get started">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5963a1 <String[17]: e"Showcase services">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5963c1 <String[17]: e"Showcase services">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5963e1 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596401 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596421 <String[11]: e"Get started">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596441 <String[11]: e"Get started">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596461 <String[17]: ue"Suggested for you">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596481 <String[17]: ue"Suggested for you">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5964a1 <String[17]: e"Suggested for you">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5964c1 <String[17]: e"Suggested for you">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5964e1 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596501 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596521 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596541 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596561 <String[20]: e"\n          \n        ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596581 <String[20]: e"\n          \n        ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5965a1 <String[6]: e"\n    \n">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5965c1 <String[6]: e"\n    \n">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5965e1 <String[6]: e"\n    \n">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596601 <String[6]: e"\n    \n">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596621 <String[47]: e"Enhance your profile with AI-powered Magic Wand">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596641 <String[47]: e"Enhance your profile with AI-powered Magic Wand">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596661 <String[75]: e"Members can receive up to 2x as many opportunities with a stronger profile.">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596681 <String[75]: e"Members can receive up to 2x as many opportunities with a stronger profile.">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5966c1 <String[18]: e"Try Premium for $0">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5966e1 <String[18]: e"Try Premium for $0">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596761 <String[10]: e"Verify now">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596781 <String[10]: e"Verify now">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5967a1 <String[9]: ue"Analytics">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5967c1 <String[9]: ue"Analytics">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5967e1 <String[9]: e"Analytics">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596801 <String[9]: e"Analytics">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596821 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596841 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596861 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596881 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596921 <String[9]: ue"Resources">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596941 <String[9]: ue"Resources">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596961 <String[9]: e"Resources">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596981 <String[9]: e"Resources">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5969a1 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5969c1 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5969e1 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596a01 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596a21 <String[12]: e"Creator mode">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596a41 <String[12]: e"Creator mode">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596a61 <String[12]: e"Creator mode">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596a81 <String[12]: e"Creator mode">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596aa1 <String[3]: ue"Off">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596ac1 <String[3]: ue"Off">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596ae1 <String[3]: e"Off">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596b01 <String[3]: e"Off">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596b21 <String[81]: ue"Get discovered, showcase content on your profile, and get access to creator tools">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596b41 <String[81]: ue"Get discovered, showcase content on your profile, and get access to creator tools">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596b61 <String[81]: e"Get discovered, showcase content on your profile, and get access to creator tools">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596b81 <String[81]: e"Get discovered, showcase content on your profile, and get access to creator tools">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596ba1 <String[10]: e"My network">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596bc1 <String[10]: e"My network">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596be1 <String[10]: e"My network">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596c01 <String[10]: e"My network">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596c21 <String[46]: ue"See and manage your connections and interests.">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f7095b1 <String[46]: ue"See and manage your connections and interests.">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f7095d1 <String[46]: e"See and manage your connections and interests.">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f7095f1 <String[46]: e"See and manage your connections and interests.">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709611 <String[20]: e"Show all 5 resources">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709631 <String[20]: e"Show all 5 resources">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd787c49 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd787c09 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709651 <String[5]: ue"About">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709671 <String[5]: ue"About">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709691 <String[5]: e"About">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f7096b1 <String[5]: e"About">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f7096d1 <String[233]: ue"Amy Lee is skilled in leadership, team work, collaboration and communication. She possess provable experience in strategy, sales and digital marketing. In terms of technology, she is interested in cloud systems and operating systems.">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f7096f1 <String[233]: ue"Amy Lee is skilled in leadership, team work, collaboration and communication. She possess provable experience in strategy, sales and digital marketing. In terms of technology, she is interested in cloud systems and operating systems.">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709711 <String[233]: e"Amy Lee is skilled in leadership, team work, collaboration and communication. She possess provable experience in strategy, sales and digital marketing. In terms of technology, she is interested in cloud systems and operating systems.">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709731 <String[233]: e"Amy Lee is skilled in leadership, team work, collaboration and communication. She possess provable experience in strategy, sales and digital marketing. In terms of technology, she is interested in cloud systems and operating systems.">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709751 <String[8]: ue"Featured">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709771 <String[8]: ue"Featured">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709791 <String[8]: e"Featured">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f7097b1 <String[8]: e"Featured">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f7097d1 <String[20]: e"\n          \n        ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f7097f1 <String[20]: e"\n          \n        ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709811 <String[6]: e"\n    \n">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709831 <String[6]: e"\n    \n">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709851 <String[6]: e"\n    \n">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709871 <String[6]: e"\n    \n">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f7098f1 <String[8]: ue"Activity">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709911 <String[8]: ue"Activity">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709931 <String[8]: e"Activity">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709951 <String[8]: e"Activity">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709971 <String[11]: ue"0 followers">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709991 <String[11]: ue"0 followers">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f7099b1 <String[11]: e"0 followers">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f7099d1 <String[11]: e"0 followers">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f7099f1 <String[13]: e"Create a post">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709a11 <String[13]: e"Create a post">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709a31 <String[20]: e"Loaded 2 Posts posts">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709a51 <String[20]: e"Loaded 2 Posts posts">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709a71 <String[7]: ue"Amy Lee">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709a91 <String[7]: ue"Amy Lee">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709ab1 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709ad1 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709af1 <String[3]: e"6mo">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709b11 <String[3]: e"6mo">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709b31 <String[5]: e"3,481">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709b51 <String[5]: e"3,481">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709b71 <String[11]: e"30 comments">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709b91 <String[11]: e"30 comments">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709bb1 <String[7]: ue"Amy Lee">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709bd1 <String[7]: ue"Amy Lee">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709bf1 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709c11 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709c31 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709c51 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709c71 <String[3]: e"6mo">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709c91 <String[3]: e"6mo">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709cb1 <String[12]: ue"Hello World!">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709cd1 <String[12]: ue"Hello World!">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709cf1 <String[14]: e"Show all posts">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709d11 <String[14]: e"Show all posts">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709d31 <String[10]: ue"Experience">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709d51 <String[10]: ue"Experience">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709d71 <String[10]: e"Experience">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709d91 <String[10]: e"Experience">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709db1 <String[16]: e"Marketing Intern">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709dd1 <String[16]: e"Marketing Intern">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709df1 <String[16]: e"Marketing Intern">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709e11 <String[16]: e"Marketing Intern">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709e31 <String[21]: ue"Microsoft \xb7 Full-time">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709e51 <String[21]: ue"Microsoft \xb7 Full-time">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709e71 <String[21]: e"Microsoft \xb7 Full-time">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709e91 <String[21]: e"Microsoft \xb7 Full-time">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709eb1 <String[7]: ue"Skills:">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709ed1 <String[7]: ue"Skills:">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709ef1 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709f11 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709f31 <String[7]: e"Skills:">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709f51 <String[7]: e"Skills:">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709f71 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709f91 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709fb1 <String[9]: ue"Education">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709fd1 <String[9]: ue"Education">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f709ff1 <String[9]: e"Education">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a011 <String[9]: e"Education">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a031 <String[31]: e"Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a051 <String[31]: e"Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a071 <String[31]: e"Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a091 <String[31]: e"Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a0b1 <String[39]: ue"Master of Business Administration - MBA">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a0d1 <String[39]: ue"Master of Business Administration - MBA">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a0f1 <String[39]: e"Master of Business Administration - MBA">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a111 <String[39]: e"Master of Business Administration - MBA">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a131 <String[7]: ue"Skills:">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a151 <String[7]: ue"Skills:">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a171 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a191 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a1b1 <String[7]: e"Skills:">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a1d1 <String[7]: e"Skills:">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a1f1 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a211 <String[1]: e" ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a231 <String[25]: ue"Licenses & certifications">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a251 <String[25]: ue"Licenses & certifications">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a271 <String[25]: e"Licenses & certifications">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a291 <String[25]: e"Licenses & certifications">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a2b1 <String[48]: e"Microsoft Certified Technology Specialist (MCTS)">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a2d1 <String[48]: e"Microsoft Certified Technology Specialist (MCTS)">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a2f1 <String[48]: e"Microsoft Certified Technology Specialist (MCTS)">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a311 <String[48]: e"Microsoft Certified Technology Specialist (MCTS)">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a331 <String[9]: ue"Microsoft">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a351 <String[9]: ue"Microsoft">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a371 <String[9]: e"Microsoft">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a391 <String[9]: e"Microsoft">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a3b1 <String[8]: ue"Projects">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a3d1 <String[8]: ue"Projects">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a3f1 <String[8]: e"Projects">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a411 <String[8]: e"Projects">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a431 <String[50]: e"User Behavior Analytics - Digital Product Consumer">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a451 <String[50]: e"User Behavior Analytics - Digital Product Consumer">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a471 <String[50]: e"User Behavior Analytics - Digital Product Consumer">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a491 <String[50]: e"User Behavior Analytics - Digital Product Consumer">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a4b1 <String[18]: ue"Feb 2019 - Present">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a4d1 <String[18]: ue"Feb 2019 - Present">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a4f1 <String[18]: e"Feb 2019 - Present">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a511 <String[18]: e"Feb 2019 - Present">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a531 <String[47]: e"Associated with Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a551 <String[47]: e"Associated with Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a571 <String[47]: e"Associated with Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a591 <String[47]: e"Associated with Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a5b1 <String[12]: ue"Volunteering">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a5d1 <String[12]: ue"Volunteering">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a5f1 <String[12]: e"Volunteering">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a611 <String[12]: e"Volunteering">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a631 <String[20]: e"Marketing Specialist">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a651 <String[20]: e"Marketing Specialist">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a671 <String[20]: e"Marketing Specialist">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a691 <String[20]: e"Marketing Specialist">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a6b1 <String[26]: ue"CRY - Child Rights and You">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a6d1 <String[26]: ue"CRY - Child Rights and You">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a6f1 <String[26]: e"CRY - Child Rights and You">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a711 <String[26]: e"CRY - Child Rights and You">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a731 <String[33]: ue"May 2013 - Present \xb7 10 yrs 5 mos">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a751 <String[33]: ue"May 2013 - Present \xb7 10 yrs 5 mos">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a771 <String[33]: e"May 2013 - Present \xb7 10 yrs 5 mos">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a791 <String[33]: e"May 2013 - Present \xb7 10 yrs 5 mos">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a7b1 <String[8]: ue"Children">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a7d1 <String[8]: ue"Children">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a7f1 <String[8]: e"Children">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a811 <String[8]: e"Children">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a831 <String[18]: ue"Awareness campaign">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a851 <String[18]: ue"Awareness campaign">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a871 <String[18]: e"Awareness campaign">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a891 <String[18]: e"Awareness campaign">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd788ec9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd788e89 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a8b1 <String[6]: ue"Skills">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a8d1 <String[6]: ue"Skills">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a8f1 <String[6]: e"Skills">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a911 <String[6]: e"Skills">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a931 <String[18]: e"Demonstrate skills">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a951 <String[18]: e"Demonstrate skills">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a971 <String[16]: e"Product Strategy">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a991 <String[16]: e"Product Strategy">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a9b1 <String[16]: e"Product Strategy">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a9d1 <String[16]: e"Product Strategy">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70a9f1 <String[29]: ue"Marketing Intern at Microsoft">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70aa11 <String[29]: ue"Marketing Intern at Microsoft">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70aa31 <String[29]: e"Marketing Intern at Microsoft">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70aa51 <String[29]: e"Marketing Intern at Microsoft">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70aa71 <String[11]: e"Engineering">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70aa91 <String[11]: e"Engineering">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70aab1 <String[11]: e"Engineering">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70aad1 <String[11]: e"Engineering">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70aaf1 <String[31]: ue"Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70ab11 <String[31]: ue"Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70ab31 <String[31]: e"Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70ab51 <String[31]: e"Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70ab71 <String[20]: e"Paid Search Strategy">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70ab91 <String[20]: e"Paid Search Strategy">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70abb1 <String[20]: e"Paid Search Strategy">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70abd1 <String[20]: e"Paid Search Strategy">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70abf1 <String[29]: ue"Marketing Intern at Microsoft">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70ac11 <String[29]: ue"Marketing Intern at Microsoft">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70ac31 <String[29]: e"Marketing Intern at Microsoft">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70ac51 <String[29]: e"Marketing Intern at Microsoft">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70ac71 <String[31]: ue"Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70ac91 <String[31]: ue"Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70acb1 <String[31]: e"Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70acd1 <String[31]: e"Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70acf1 <String[17]: e"Show all 5 skills">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70ad11 <String[17]: e"Show all 5 skills">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70ad31 <String[12]: ue"Publications">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70ad51 <String[12]: ue"Publications">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70ad71 <String[12]: e"Publications">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70ad91 <String[12]: e"Publications">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70adb1 <String[43]: e"User Behavior Analytics on digital services">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70add1 <String[43]: e"User Behavior Analytics on digital services">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70adf1 <String[43]: e"User Behavior Analytics on digital services">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70ae11 <String[43]: e"User Behavior Analytics on digital services">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70ae31 <String[23]: ue"megamind \xb7 Jan 21, 2019">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70ae51 <String[23]: ue"megamind \xb7 Jan 21, 2019">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70ae71 <String[23]: e"megamind \xb7 Jan 21, 2019">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70ae91 <String[23]: e"megamind \xb7 Jan 21, 2019">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70aeb1 <String[7]: ue"Courses">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70aed1 <String[7]: ue"Courses">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70aef1 <String[7]: e"Courses">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70af11 <String[7]: e"Courses">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70af31 <String[18]: e"Marketing Strategy">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70af51 <String[18]: e"Marketing Strategy">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70af71 <String[18]: e"Marketing Strategy">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70af91 <String[18]: e"Marketing Strategy">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70afb1 <String[7]: ue"MBMS102">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70afd1 <String[7]: ue"MBMS102">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70aff1 <String[7]: e"MBMS102">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b011 <String[7]: e"MBMS102">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b031 <String[47]: e"Associated with Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b051 <String[47]: e"Associated with Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b071 <String[47]: e"Associated with Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b091 <String[47]: e"Associated with Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b0b1 <String[15]: ue"Honors & awards">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b0d1 <String[15]: ue"Honors & awards">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b0f1 <String[15]: e"Honors & awards">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b111 <String[15]: e"Honors & awards">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b131 <String[6]: e"Honors">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b151 <String[6]: e"Honors">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b171 <String[6]: e"Honors">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b191 <String[6]: e"Honors">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b1b1 <String[8]: ue"May 2021">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b1d1 <String[8]: ue"May 2021">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b1f1 <String[8]: e"May 2021">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b211 <String[8]: e"May 2021">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b231 <String[47]: e"Associated with Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b251 <String[47]: e"Associated with Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b271 <String[47]: e"Associated with Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b291 <String[47]: e"Associated with Georgia Institute of Technology">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b2b1 <String[9]: ue"Interests">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b2d1 <String[9]: ue"Interests">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b2f1 <String[9]: e"Interests">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b311 <String[9]: e"Interests">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b371 <String[9]: e"Microsoft">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b391 <String[9]: e"Microsoft">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b3b1 <String[9]: e"Microsoft">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b3d1 <String[9]: e"Microsoft">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b471 <String[18]: e"Show all companies">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b491 <String[18]: e"Show all companies">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b4b1 <String[11]: e"\n          ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b4d1 <String[11]: e"\n          ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b4f1 <String[15]: e"\n    Following\n">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b511 <String[15]: e"\n    Following\n">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd78a149 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd78a109 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b559 <String[16]: e"Profile language">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b579 <String[16]: e"Profile language">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b599 <String[7]: e"English">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b5b9 <String[7]: e"English">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b601 <String[20]: e"Public profile & URL">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b621 <String[20]: e"Public profile & URL">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b641 <String[30]: e"www.linkedin.com/in/amy-lee-gt">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b661 <String[30]: e"www.linkedin.com/in/amy-lee-gt">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b681 <String[18]: ue"People also viewed">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b6a1 <String[18]: ue"People also viewed">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b6c1 <String[18]: e"People also viewed">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b6e1 <String[18]: e"People also viewed">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b701 <String[10]: e"Allison Wu">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b721 <String[10]: e"Allison Wu">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b741 <String[10]: e"Allison Wu">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b761 <String[10]: e"Allison Wu">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b781 <String[6]: ue"\xb7 3rd+">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b7a1 <String[6]: ue"\xb7 3rd+">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b7c1 <String[25]: e"Out of network connection">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b7e1 <String[25]: e"Out of network connection">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b801 <String[146]: ue"Product Marketing Manager Intern @ Microsoft | Design Media Arts & Digital Humanities @ UCLA | Ex-Brand and Digital Marketing Intern @ Nickelodeon">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70b821 <String[146]: ue"Product Marketing Manager Intern @ Microsoft | Design Media Arts & Digital Humanities @ UCLA | Ex-Brand and Digital Marketing Intern @ Nickelodeon">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x37404566f131 <String[146]: e"Product Marketing Manager Intern @ Microsoft | Design Media Arts & Digital Humanities @ UCLA | Ex-Brand and Digital Marketing Intern @ Nickelodeon">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x37404566f151 <String[146]: e"Product Marketing Manager Intern @ Microsoft | Design Media Arts & Digital Humanities @ UCLA | Ex-Brand and Digital Marketing Intern @ Nickelodeon">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x37404566f171 <String[7]: e"Connect">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x37404566f191 <String[7]: e"Connect">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x37404566f1b1 <String[13]: e"Taylor Greene">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x37404566f1d1 <String[13]: e"Taylor Greene">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x37404566f1f1 <String[13]: e"Taylor Greene">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x37404566f211 <String[13]: e"Taylor Greene">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x37404566f231 <String[6]: ue"\xb7 3rd+">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x37404566f251 <String[6]: ue"\xb7 3rd+">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x37404566f271 <String[25]: e"Out of network connection">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x37404566f291 <String[25]: e"Out of network connection">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x37404566f2b1 <String[37]: ue"Digital Marketing at American Express">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x37404566f2d1 <String[37]: ue"Digital Marketing at American Express">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x37404566f2f1 <String[37]: e"Digital Marketing at American Express">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x37404566f311 <String[37]: e"Digital Marketing at American Express">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x37404566f331 <String[7]: e"Connect">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x37404566f351 <String[7]: e"Connect">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x37404566f371 <String[17]: e"Lindsay Cosentino">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x37404566f391 <String[17]: e"Lindsay Cosentino">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x37404566f3b1 <String[17]: e"Lindsay Cosentino">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bc889 <String[17]: e"Lindsay Cosentino">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bc8a9 <String[6]: ue"\xb7 3rd+">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bc8c9 <String[6]: ue"\xb7 3rd+">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bc8e9 <String[25]: e"Out of network connection">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bc909 <String[25]: e"Out of network connection">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bc929 <String[62]: ue"Senior Manager, Digital Customer Marketing at American Express">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bc949 <String[62]: ue"Senior Manager, Digital Customer Marketing at American Express">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bc969 <String[62]: e"Senior Manager, Digital Customer Marketing at American Express">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bc989 <String[62]: e"Senior Manager, Digital Customer Marketing at American Express">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bc9a9 <String[7]: e"Connect">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bc9c9 <String[7]: e"Connect">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bc9e9 <String[11]: e"Sophia Tian">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bca09 <String[11]: e"Sophia Tian">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bca29 <String[11]: e"Sophia Tian">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bca49 <String[11]: e"Sophia Tian">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bca69 <String[6]: ue"\xb7 3rd+">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bca89 <String[6]: ue"\xb7 3rd+">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcaa9 <String[25]: e"Out of network connection">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcac9 <String[25]: e"Out of network connection">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcae9 <String[42]: ue"Manager, Digital Brand Marketing at adidas">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcb09 <String[42]: ue"Manager, Digital Brand Marketing at adidas">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcb29 <String[42]: e"Manager, Digital Brand Marketing at adidas">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcb49 <String[42]: e"Manager, Digital Brand Marketing at adidas">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcb69 <String[7]: e"Connect">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcb89 <String[7]: e"Connect">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcba9 <String[19]: e"Taylor-Marie Dobson">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcbc9 <String[19]: e"Taylor-Marie Dobson">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcbe9 <String[19]: e"Taylor-Marie Dobson">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcc09 <String[19]: e"Taylor-Marie Dobson">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcc29 <String[6]: ue"\xb7 3rd+">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcc49 <String[6]: ue"\xb7 3rd+">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcc69 <String[25]: e"Out of network connection">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcc89 <String[25]: e"Out of network connection">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcca9 <String[56]: ue"Marketing Analyst @ American Express | Digital Marketing">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bccc9 <String[56]: ue"Marketing Analyst @ American Express | Digital Marketing">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcce9 <String[56]: e"Marketing Analyst @ American Express | Digital Marketing">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcd09 <String[56]: e"Marketing Analyst @ American Express | Digital Marketing">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcd29 <String[7]: e"Connect">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcd49 <String[7]: e"Connect">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcd69 <String[8]: e"Show all">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcd89 <String[8]: e"Show all">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcda9 <String[19]: ue"People you may know">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcdc9 <String[19]: ue"People you may know">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcde9 <String[19]: e"People you may know">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bce09 <String[19]: e"People you may know">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bce29 <String[17]: ue"From your company">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bce49 <String[17]: ue"From your company">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bce69 <String[17]: e"From your company">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bce89 <String[17]: e"From your company">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcea9 <String[11]: e"Hamza abbas">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcec9 <String[11]: e"Hamza abbas">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcee9 <String[11]: e"Hamza abbas">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcf09 <String[11]: e"Hamza abbas">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcf29 <String[2]: ue"--">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcf49 <String[2]: ue"--">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcf69 <String[2]: e"--">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcf89 <String[2]: e"--">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcfa9 <String[7]: e"Connect">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcfc9 <String[7]: e"Connect">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bcfe9 <String[24]: e"g Naresh profile picture">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd009 <String[24]: e"g Naresh profile picture">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd029 <String[8]: e"g Naresh">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd049 <String[8]: e"g Naresh">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd069 <String[8]: e"g Naresh">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd089 <String[8]: e"g Naresh">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd0a9 <String[14]: ue".NET Developer">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd0c9 <String[14]: ue".NET Developer">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd0e9 <String[14]: e".NET Developer">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd109 <String[14]: e".NET Developer">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd129 <String[7]: e"Connect">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd149 <String[7]: e"Connect">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd169 <String[14]: e"Mohammed Yasir">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd189 <String[14]: e"Mohammed Yasir">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd1a9 <String[14]: e"Mohammed Yasir">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd1c9 <String[14]: e"Mohammed Yasir">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd1e9 <String[2]: ue"--">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd209 <String[2]: ue"--">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd229 <String[2]: e"--">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd249 <String[2]: e"--">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd269 <String[7]: e"Connect">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd289 <String[7]: e"Connect">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd2a9 <String[14]: e"Khushboo Dubey">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd2c9 <String[14]: e"Khushboo Dubey">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd2e9 <String[14]: e"Khushboo Dubey">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd309 <String[14]: e"Khushboo Dubey">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd329 <String[9]: ue"Assistant">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd349 <String[9]: ue"Assistant">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd369 <String[9]: e"Assistant">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd389 <String[9]: e"Assistant">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd3a9 <String[7]: e"Connect">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd3c9 <String[7]: e"Connect">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd3e9 <String[30]: e"Yakub mustapha profile picture">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2b71ec5bd409 <String[30]: e"Yakub mustapha profile picture">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefed99 <String[14]: e"Yakub mustapha">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefedb9 <String[14]: e"Yakub mustapha">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefedd9 <String[14]: e"Yakub mustapha">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefedf9 <String[14]: e"Yakub mustapha">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefee19 <String[34]: ue"A full star developer at Microsoft">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefee39 <String[34]: ue"A full star developer at Microsoft">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefee59 <String[34]: e"A full star developer at Microsoft">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefee79 <String[34]: e"A full star developer at Microsoft">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefee99 <String[7]: e"Connect">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefeeb9 <String[7]: e"Connect">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefeed9 <String[8]: e"Show all">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefeef9 <String[8]: e"Show all">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefef19 <String[14]: ue"You might like">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefef39 <String[14]: ue"You might like">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefef59 <String[14]: e"You might like">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefef79 <String[14]: e"You might like">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefef99 <String[14]: ue"Groups for you">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefefb9 <String[14]: ue"Groups for you">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefefd9 <String[14]: e"Groups for you">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefeff9 <String[14]: e"Groups for you">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd78b3c9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd78b389 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff019 <String[34]: e"Data Science Community (moderated)">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff039 <String[34]: e"Data Science Community (moderated)">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff059 <String[34]: e"Data Science Community (moderated)">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff079 <String[34]: e"Data Science Community (moderated)">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff099 <String[15]: ue"404,999 members">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff0b9 <String[15]: ue"404,999 members">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff0d9 <String[15]: e"404,999 members">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff0f9 <String[15]: e"404,999 members">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff119 <String[4]: e"Join">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff139 <String[4]: e"Join">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff159 <String[51]: e"Cloud Computing, SaaS, Data Centre & Virtualization">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff179 <String[51]: e"Cloud Computing, SaaS, Data Centre & Virtualization">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff199 <String[51]: e"Cloud Computing, SaaS, Data Centre & Virtualization">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff1b9 <String[51]: e"Cloud Computing, SaaS, Data Centre & Virtualization">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff1d9 <String[15]: ue"879,112 members">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff1f9 <String[15]: ue"879,112 members">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff219 <String[15]: e"879,112 members">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff239 <String[15]: e"879,112 members">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff259 <String[4]: e"Join">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff279 <String[4]: e"Join">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff299 <String[8]: e"Show all">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff2b9 <String[8]: e"Show all">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff2f9 <String[9]: ue"Messaging">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff319 <String[9]: ue"Messaging">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff339 <String[61]: e"You are on the messaging overlay. Press enter to minimize it.">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff359 <String[61]: e"You are on the messaging overlay. Press enter to minimize it.">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff3e1 <String[49]: e"Type to search for connections and conversations.">
** In function 0x2750002ba298 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff401 <String[49]: e"Type to search for connections and conversations.">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff421 <String[88]: e"\n            Search your messages by recipient, content, or conversation name\n          ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff441 <String[88]: e"\n            Search your messages by recipient, content, or conversation name\n          ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff461 <String[7]: ue"Focused">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff481 <String[7]: ue"Focused">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff4c1 <String[183]: e"Attention screen reader users, messaging items continuously update. Please use the tab and shift + tab keys instead of your up and down arrow keys to navigate between messaging items.">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff4e1 <String[183]: e"Attention screen reader users, messaging items continuously update. Please use the tab and shift + tab keys instead of your up and down arrow keys to navigate between messaging items.">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff521 <String[19]: e"Jason from LinkedIn">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff541 <String[19]: e"Jason from LinkedIn">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff589 <String[6]: e"Jun 20">
** In function 0x2750002ba298 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff5a9 <String[6]: e"Jun 20">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff5c9 <String[67]: e"Open the options list in your conversation with Jason from LinkedIn">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff5e9 <String[67]: e"Open the options list in your conversation with Jason from LinkedIn">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff609 <String[15]: e"LinkedIn Offer ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceff629 <String[15]: e"LinkedIn Offer ">
** In function 0x2750002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceffe11 <String[47]: e"Enhance your profile with AI-powered Magic Wand">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceffeb1 <String[75]: e"Members can receive up to 2x as many opportunities with a stronger profile.">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceffed1 <String[81]: ue"Get discovered, showcase content on your profile, and get access to creator tools">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7ceffef1 <String[81]: e"Get discovered, showcase content on your profile, and get access to creator tools">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefff11 <String[46]: ue"See and manage your connections and interests.">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefff31 <String[46]: e"See and manage your connections and interests.">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefff51 <String[233]: ue"Amy Lee is skilled in leadership, team work, collaboration and communication. She possess provable experience in strategy, sales and digital marketing. In terms of technology, she is interested in cloud systems and operating systems.">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefff71 <String[233]: e"Amy Lee is skilled in leadership, team work, collaboration and communication. She possess provable experience in strategy, sales and digital marketing. In terms of technology, she is interested in cloud systems and operating systems.">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefff91 <String[39]: ue"Master of Business Administration - MBA">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefffb1 <String[39]: e"Master of Business Administration - MBA">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x096a7cefffd1 <String[48]: e"Microsoft Certified Technology Specialist (MCTS)">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596c41 <String[48]: e"Microsoft Certified Technology Specialist (MCTS)">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596c61 <String[50]: e"User Behavior Analytics - Digital Product Consumer">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596df1 <String[50]: e"User Behavior Analytics - Digital Product Consumer">
** In function 0x2750002ba298 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596e39 <String[47]: e"Associated with Georgia Institute of Technology">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596e59 <String[47]: e"Associated with Georgia Institute of Technology">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596e79 <String[26]: ue"CRY - Child Rights and You">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596ec1 <String[26]: e"CRY - Child Rights and You">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596ee1 <String[33]: ue"May 2013 - Present \xb7 10 yrs 5 mos">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596f01 <String[33]: e"May 2013 - Present \xb7 10 yrs 5 mos">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596f21 <String[43]: e"User Behavior Analytics on digital services">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596f41 <String[43]: e"User Behavior Analytics on digital services">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596f61 <String[23]: ue"megamind \xb7 Jan 21, 2019">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596f81 <String[23]: e"megamind \xb7 Jan 21, 2019">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596fa1 <String[47]: e"Associated with Georgia Institute of Technology">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596fc1 <String[47]: e"Associated with Georgia Institute of Technology">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e596fe1 <String[47]: e"Associated with Georgia Institute of Technology">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e597001 <String[47]: e"Associated with Georgia Institute of Technology">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e597021 <String[146]: ue"Product Marketing Manager Intern @ Microsoft | Design Media Arts & Digital Humanities @ UCLA | Ex-Brand and Digital Marketing Intern @ Nickelodeon">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e597041 <String[146]: e"Product Marketing Manager Intern @ Microsoft | Design Media Arts & Digital Humanities @ UCLA | Ex-Brand and Digital Marketing Intern @ Nickelodeon">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e597061 <String[37]: ue"Digital Marketing at American Express">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e597081 <String[37]: e"Digital Marketing at American Express">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x2bea7e5970a1 <String[62]: ue"Senior Manager, Digital Customer Marketing at American Express">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70f869 <String[62]: e"Senior Manager, Digital Customer Marketing at American Express">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70f889 <String[42]: ue"Manager, Digital Brand Marketing at adidas">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70f8a9 <String[42]: e"Manager, Digital Brand Marketing at adidas">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70f8c9 <String[56]: ue"Marketing Analyst @ American Express | Digital Marketing">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70f8e9 <String[56]: e"Marketing Analyst @ American Express | Digital Marketing">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70f909 <String[34]: ue"A full star developer at Microsoft">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70f929 <String[34]: e"A full star developer at Microsoft">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70f949 <String[51]: e"Cloud Computing, SaaS, Data Centre & Virtualization">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70f969 <String[51]: e"Cloud Computing, SaaS, Data Centre & Virtualization">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70f989 <String[61]: e"You are on the messaging overlay. Press enter to minimize it.">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70f9d1 <String[49]: e"Type to search for connections and conversations.">
** In function 0x2750002ba2c0 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70fa19 <String[88]: e"\n            Search your messages by recipient, content, or conversation name\n          ">
** In function 0x2750002ba2f0 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70fa39 <String[183]: e"Attention screen reader users, messaging items continuously update. Please use the tab and shift + tab keys instead of your up and down arrow keys to navigate between messaging items.">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x08f89f70fa59 <String[67]: e"Open the options list in your conversation with Jason from LinkedIn">
** In function 0x2750002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd78d631 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd78d5f1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd792cc1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd792c81 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd793f41 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd793f01 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd795229 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd7951e9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd797461 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd797421 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd799669 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd799629 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd79b0e1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd79b0a1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd79cb59 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd79cb19 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd79e5d1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd79e591 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd7a0049 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd7a0009 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd7a1ac1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd7a1a81 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd7a3539 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd7a34f9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd7a4fb1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd7a4f71 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd7a6a29 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd7a69e9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd7a84a1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd7a8461 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd7a9f19 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd7a9ed9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd7ab991 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd7ab951 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd7acc79 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd7acc39 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd7b6ed1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd7b6e91 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd7ba971 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd7ba931 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd7bc3e9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd7bc3a9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd7bde61 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd7bde21 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c33bd7bf8d9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c33bd7bf899 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x273544482491 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x273544482451 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x273544483f09 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x273544483ec9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x273544485981 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x273544485941 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x2735444873f9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x2735444873b9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x273544488e71 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x273544488e31 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x27354448a8e9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x27354448a8a9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x27354448c361 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x27354448c321 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x27354448ddd9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x27354448dd99 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x27354448f851 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x27354448f811 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x2735444912c9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x273544491289 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x273544492d41 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x273544492d01 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x2735444947b9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x273544494779 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x273544496231 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x2735444961f1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d21415cac9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d21415ca89 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d21415ddb1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d21415dd71 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d21415ffb9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d21415ff79 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d214161a31 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d2141619f1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d2141634a9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d214163469 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d214164f21 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d214164ee1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d214166999 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d214166959 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d214168411 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d2141683d1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d214169e89 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d214169e49 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d21416b901 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d21416b8c1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d21416d379 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d21416d339 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d21416edf1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d21416edb1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d214170869 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d214170829 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d2141722e1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d2141722a1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d2141735c9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d214173589 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d2141757d1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d214175791 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d214177249 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d214177209 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d214178cc1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d214178c81 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d21417a739 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d21417a6f9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d21417c1b1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d21417c171 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d21417dc29 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d21417dbe9 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x34d21417f6a1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x34d21417f661 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f982421 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9823e1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f983e99 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f983e59 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f985911 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f9858d1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f987389 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f987349 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f988e01 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f988dc1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f98a879 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f98a839 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f98c2f1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f98c2b1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f98d5d9 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f98d599 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f98f7e1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f98f7a1 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f991259 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f991219 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f992cd1 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f992c91 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x17a29f994749 <String[39]: "https://www.linkedin.com/in/amy-lee-gt/">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x17a29f994709 <String[23]: "(25) Amy Lee | LinkedIn">
** In function 0x2750002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

