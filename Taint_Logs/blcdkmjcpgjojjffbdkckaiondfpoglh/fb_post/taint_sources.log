>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1e06b3c6aa81 <String[16]: "chrome://newtab/">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1e06b3c6a889 <String[7]: "New Tab">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1e06b3c7b8c1 <String[16]: "chrome://newtab/">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1e06b3c7b891 <String[7]: "New Tab">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1e06b3c7d599 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1e06b3c7d569 <String[8]: "Facebook">
** In function 0x710002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x1e06b3c7ed51 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x1e06b3c7ed21 <String[8]: "Facebook">
** In function 0x710002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661c11c9 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661c1199 <String[8]: "Facebook">
** In function 0x710002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661c26e9 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661c26b9 <String[8]: "Facebook">
** In function 0x710002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661c3ec1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661c3e91 <String[8]: "Facebook">
** In function 0x710002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661c5c21 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661c5bf1 <String[8]: "Facebook">
** In function 0x710002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661c6e81 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661c6e51 <String[8]: "Facebook">
** In function 0x710002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661c80e1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661c80b1 <String[8]: "Facebook">
** In function 0x710002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661c9351 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661c9321 <String[8]: "Facebook">
** In function 0x710002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661cbf59 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661cbf29 <String[8]: "Facebook">
** In function 0x710002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661cd731 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661cd701 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661ced11 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661cece1 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661d02c1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661d0291 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661d1871 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661d1841 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661d3459 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661d3429 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661d4a09 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661d49d9 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661d5cf9 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661d5cc9 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661d6fe9 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661d6fb9 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661d82d9 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661d82a9 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661d95c9 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661d9599 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661dbd31 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661dbd01 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661dd021 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661dcff1 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661dffc1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661dff91 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661e12b1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661e1281 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from blink)
0x389ac27fa251 <String[55]: e"https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba1e8 ``, source code:
const ALLOW_ALL = true;
const MAX_DEPTH = 0;

var allowed_sites = [];
var prohibit_tag = ["script", "style", "noscript"];
var delim = '`!@!$`';

var eList = [];
var eListContent = [];

var cwTexts = [];
var cwScores = [];
var cwSentences = [];

var gResults = [];

function allowed(str) {
    if (ALLOW_ALL) {
        return true;
    }

    for (var i = 0; i < allowed_sites.length; i++)
        if (str.toLowerCase().includes(allowed_sites[i].toLowerCase()))
            return true;

    return false;
}

function prohibited(str) {
    for (var i=0; i<prohibit_tag.length; i++) {
        if (str.toLowerCase().includes(prohibit_tag[i].toLocaleString()))
            return true;
    }
    return false;
}

function count_maximum_depth(el) {
    var ret = 0;
    if (prohibited(el.tagName)) ret = 100; // arbitrary large number

    var c = el.children;
    for (var i=0; i<c.length; i++) {
        ret = Math.max(count_maximum_depth(c[i]) + 1, ret);
    }

    return ret;
}

function createCORSRequest(method, url, api_key=null) {
    var xhr = new XMLHttpRequest();
    xhr.open(method, url);
    if (method == "POST") {
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    }
    return xhr;
}

function applyClaimSpottingAPI(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}

function applyGoogleAPI() {
    var url = "https://idir.uta.edu/misinfo-api/query_google";

    var tot = "";
    for (var i=0; i<cwSentences.length; i++) {
        tot += cwSentences[i];
        if (i < cwSentences.length - 1) tot += "$&@!@&!*";
    }
    
    var xhr = createCORSRequest('POST', url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }
  
    xhr.onload = function() {
        gResults = JSON.parse(xhr.responseText);

        var retIdx = 0;
        for (var i = 0; i < cwScores.length; i++) {
            var curHTML = eListContent[i];
            for (var j = 0; j < cwScores[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                var curRes = gResults[retIdx++];

                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);

                var startColor = (curRes.empty ? "fce3ec" : "00ff66");
                var endColor = (curRes.empty ? "ffe8cc" : "00d4ff");
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#" + startColor + tCode + "), to(#" + endColor + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";

                var tooltipHTML = '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%';

                if (!curRes.empty) {
                    var googleFcURL = "https://toolbox.google.com/factcheck/explorer/search/" + fixedEncodeURIComponent(cwTexts[i][j]) + ";hl=en";
                    tooltipHTML = '<a target="_blank" href="' + googleFcURL + '">' + tooltipHTML + '. Click me to see relevant fact-checks!</span>' + '</a>';
                } else {
                    tooltipHTML += '</span>';
                }

                newHTML = '<div class="tooltip-vericlaim">' + newHTML + tooltipHTML + '</div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }
    };
  
    xhr.onerror = function() {
        console.log('There was an error making the request');
    };
  
    xhr.send(tot);
}

function processClaimCheckingResults(csListener, badgeLenListener) {
    if (gResults.length != cwSentences.length) {
        setTimeout(processClaimCheckingResults, 200, csListener, badgeLenListener);
        return;
    }

    console.log(gResults);

    var ccListener = function (msg, sender, response) {
        if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
            response({
                id: '200-cc',
                cwSentences: cwSentences,
                gResults: gResults
            });
        }
    }
    chrome.runtime.onMessage.removeListener(csListener);
    chrome.runtime.onMessage.addListener(ccListener);

    var badgeLenCcListener = function (msg, sender, response) {
        if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
            response({
                id: "200-cc",
                content: cwSentences.length
            });
        }
    }
    chrome.runtime.onMessage.removeListener(badgeLenListener);
    chrome.runtime.onMessage.addListener(badgeLenCcListener);
}

var threshold;
var viewmode;

chrome.storage.sync.get(['threshold'], function(result) {
    if (result.threshold == undefined) {
        chrome.storage.sync.set({threshold: 0.6}, function() {});
        threshold = 0.6;
    } else {
        threshold = result.threshold;
    }
});

function get_candidate_claims(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}

if (allowed(document.URL)) {
    console.log("COKN Health Info Check will operate on this site")

    respondLoading = function(msg, sender, response) {
        if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
            response({
                id: 'loading-cs',
                cwSentences: [],
                gResults: []
            });
        }
    }
    chrome.runtime.onMessage.addListener(respondLoading);

    var badgeLenLoading = function (msg, sender, response) {
        if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
            response({
                id: "-1",
                content: []
            });
        }
    }
    chrome.runtime.onMessage.addListener(badgeLenLoading);

    var style = document.createElement('style');
    style.innerHTML = `
    claim {
        -webkit-box-decoration-break: clone;
        box-decoration-break: clone;
        border-radius: .4em;
        padding-left: .15em;
        padding-right: .15em;
        padding-top: .05em;
        padding-bottom: .05em;
        color: black;
    }
    /* Tooltip container */
    .tooltip-vericlaim {
        position: relative;
        display: inline;
    }

    /* Tooltip text */
    .tooltip-vericlaim .tooltiptext-vericlaim {
        visibility: hidden;
        width: 20em;
        background-color: black;
        color: #fff;
        text-align: center;
        padding: 5px 0;
        border-radius: 6px;
        font-size: 10pt;
        font-weight: bold;
        
        /* Position the tooltip text - see examples below! */
        position: absolute;
        z-index: 9999;
    }

    /* Show the tooltip text when you mouse over the tooltip container */
    .tooltip-vericlaim:hover .tooltiptext-vericlaim {
        visibility: visible;
    }
    `;

    // style.innerHTML = `
    // .has-tooltip {
    //     /*position: relative;*/
    //     display: inline;
    // }
    // .tooltip-wrapper {
    //     position: absolute;
    //     visibility: hidden;
    // }
    // .has-tooltip:hover .tooltip-wrapper {
    //     visibility: visible;
    //     opacity: 0.7;
    //     /*top: 30px;*/
    //     /*left: 50%;*/
    //     /*margin-left: -76px;*/
    //     z-index: 9999;
    // }
    
    // .tooltip {
    //     display: block;
    //     position: relative;
    //     top: 2em;
    //     right: 100%;
    //     width: 140px;
    //     height: 96px;
    //     /*margin-left: -76px;*/
    //     color: #FFFFFF;
    //     background: #000000;
    //     line-height: 96px;
    //     text-align: center;
    //     border-radius: 8px;
    //     box-shadow: 4px 3px 10px #800000;
    // }
    // .tooltip:after {
    //     content: '';
    //     position: absolute;
    //     bottom: 100%;
    //     left: 50%;
    //     margin-left: -8px;
    //     width: 0;
    //     height: 0;
    //     border-bottom: 8px solid #000000;
    //     border-right: 8px solid transparent;
    //     border-left: 8px solid transparent;
    // }    
    // `

    document.head.appendChild(style);

    eList = get_candidate_claims(document.body.querySelectorAll('*:not(style):not(script):not(noscript)'));
    applyClaimSpottingAPI(respondLoading, badgeLenLoading);
} else {
    chrome.runtime.onMessage.addListener((msg, sender, response) => {
        if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
            response({
                id: 'not-support',
                cwSentences: [],
                gResults: []
            });
        }
    });
}

function fixedEncodeURIComponent(str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return '%' + c.charCodeAt(0).toString(16);
    });
}
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661e2b21 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661e2af1 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661e3e11 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661e3de1 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661e5101 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661e50d1 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661e63f1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661e63c1 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cb679 <String[7]: e"Amy Lee">
** In function 0x710002ba298 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cb6e1 <String[7]: e"Amy Lee">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cb729 <String[9]: e"2 friends">
** In function 0x710002ba298 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cb749 <String[9]: e"2 friends">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661e76e1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661e76b1 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661e89d1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661e89a1 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cb8a9 <String[16]: e"MyComputerCareer">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cb8c9 <String[16]: e"MyComputerCareer">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cb8e9 <String[13]: e"Scream Queens">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cb909 <String[13]: e"Scream Queens">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cb929 <String[19]: e"High School Reunion">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cb949 <String[19]: e"High School Reunion">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cb969 <String[16]: e"Atlanta, Georgia">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cb989 <String[16]: e"Atlanta, Georgia">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cb9a9 <String[8]: e"Koski Tl">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cb9c9 <String[8]: e"Koski Tl">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cb9e9 <String[17]: e"In a relationship">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cba09 <String[17]: e"In a relationship">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cba29 <String[3]: e"anu">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cba49 <String[3]: e"anu">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cba69 <String[10]: e"google.com">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cba89 <String[10]: e"google.com">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661e9cc1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661e9c91 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661eafb1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661eaf81 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbc21 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbc41 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbc61 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbc81 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbca1 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbcc1 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbce1 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbd01 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbd21 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbd41 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbd61 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbd81 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661ec2a1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661ec271 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbda1 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbdc1 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbde1 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbe01 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbe21 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbe41 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbe61 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbe81 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbea1 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbec1 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbee1 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbf01 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbf21 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbf41 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbf61 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbf81 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbfa1 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbfc1 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cbfe1 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc001 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc021 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc041 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc061 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc081 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc0a1 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc0c1 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc0e1 <String[7]: ue"Amy Lee">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc101 <String[7]: ue"Amy Lee">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc121 <String[11]: ue"Atlanta, GA">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc141 <String[11]: ue"Atlanta, GA">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc161 <String[1]: e"\xa0">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc181 <String[1]: e"\xa0">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc1a1 <String[3]: e" \xb7 ">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc1c1 <String[3]: e" \xb7 ">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc209 <String[1]: e"t">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc229 <String[1]: e"t">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc249 <String[1]: e"S">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc269 <String[1]: e"S">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc289 <String[1]: e"n">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc2a9 <String[1]: e"n">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc2c9 <String[1]: e"o">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc2e9 <String[1]: e"o">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc309 <String[1]: e"r">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc329 <String[1]: e"r">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc349 <String[1]: e"o">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc369 <String[1]: e"o">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc389 <String[1]: e"d">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc3a9 <String[1]: e"d">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc3c9 <String[1]: e"s">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc3e9 <String[1]: e"s">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc409 <String[1]: e"p">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc429 <String[1]: e"p">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc449 <String[1]: e"e">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc469 <String[1]: e"e">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc489 <String[1]: e"\xa0">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc4a9 <String[1]: e"\xa0">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc4c9 <String[1]: e"h">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc4e9 <String[1]: e"h">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc509 <String[1]: e"r">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc529 <String[1]: e"r">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc549 <String[1]: e"2">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc569 <String[1]: e"2">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc589 <String[1]: e"e">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc5a9 <String[1]: e"e">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc5c9 <String[1]: e"2">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc5e9 <String[1]: e"2">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc609 <String[1]: e"f">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc629 <String[1]: e"f">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc649 <String[1]: e"e">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc669 <String[1]: e"e">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc689 <String[1]: e"0">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc6a9 <String[1]: e"0">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc6c9 <String[1]: e"5">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc6e9 <String[1]: e"5">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc709 <String[1]: e"b">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc729 <String[1]: e"b">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc749 <String[1]: e"D">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc769 <String[1]: e"D">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc789 <String[1]: e"3">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc7a9 <String[1]: e"3">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc7c9 <String[1]: e",">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc7e9 <String[1]: e",">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc809 <String[1]: e"6">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc829 <String[1]: e"6">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc849 <String[1]: e"c">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc869 <String[1]: e"c">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc889 <String[1]: e"2">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc8a9 <String[1]: e"2">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc8c9 <String[1]: e"3">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc8e9 <String[1]: e"3">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc909 <String[1]: e"c">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc929 <String[1]: e"c">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc949 <String[1]: e"0">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc969 <String[1]: e"0">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc989 <String[1]: e"f">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc9a9 <String[1]: e"f">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc9c9 <String[1]: e"l">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cc9e9 <String[1]: e"l">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cca09 <String[1]: e"u">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cca29 <String[1]: e"u">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cca49 <String[1]: e"2">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cca69 <String[1]: e"2">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cca89 <String[1]: e"g">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccaa9 <String[1]: e"g">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccac9 <String[1]: e"m">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccae9 <String[1]: e"m">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccb09 <String[1]: e"8">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccb29 <String[1]: e"8">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccb49 <String[1]: e"h">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccb69 <String[1]: e"h">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccb89 <String[1]: e"a">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccba9 <String[1]: e"a">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccbc9 <String[1]: e"2">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccbe9 <String[1]: e"2">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccc09 <String[1]: e"7">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccc29 <String[1]: e"7">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccc49 <String[1]: e"6">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccc69 <String[1]: e"6">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccc89 <String[1]: e"4">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccca9 <String[1]: e"4">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cccc9 <String[1]: e"g">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccce9 <String[1]: e"g">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccd09 <String[1]: e"g">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccd29 <String[1]: e"g">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccd49 <String[1]: e"2">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccd69 <String[1]: e"2">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccd89 <String[1]: e"8">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccda9 <String[1]: e"8">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccdc9 <String[1]: e"0">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccde9 <String[1]: e"0">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cce09 <String[1]: e"1">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cce29 <String[1]: e"1">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cce49 <String[1]: e"u">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cce69 <String[1]: e"u">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cce89 <String[1]: e"e">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccea9 <String[1]: e"e">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccec9 <String[1]: e"4">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccee9 <String[1]: e"4">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccf09 <String[1]: e"5">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccf29 <String[1]: e"5">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccf49 <String[1]: e"7">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccf69 <String[1]: e"7">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccf89 <String[1]: e"h">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccfa9 <String[1]: e"h">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccfc9 <String[1]: e"m">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477ccfe9 <String[1]: e"m">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd009 <String[1]: e"c">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd029 <String[1]: e"c">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd049 <String[1]: e"m">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd069 <String[1]: e"m">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd089 <String[1]: e"\xa0">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd0a9 <String[1]: e"\xa0">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd0c9 <String[1]: e"3">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd0e9 <String[1]: e"3">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd109 <String[1]: e"\xa0">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd129 <String[1]: e"\xa0">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd149 <String[3]: ue" \xb7 ">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd169 <String[3]: ue" \xb7 ">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd1d1 <String[20]: e"This is a rainy day!">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd1f1 <String[20]: e"This is a rainy day!">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661ed591 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661ed561 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd231 <String[14]: e"All reactions:">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd251 <String[14]: e"All reactions:">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd271 <String[1]: e"1">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd291 <String[1]: e"1">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd2b1 <String[7]: e"Amy Lee">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd2d1 <String[7]: e"Amy Lee">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd2f1 <String[10]: e"2 comments">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd311 <String[10]: e"2 comments">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd331 <String[7]: e"1 share">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd351 <String[7]: e"1 share">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd371 <String[4]: e"Like">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd391 <String[4]: e"Like">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd3b1 <String[7]: e"Comment">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd3d1 <String[7]: e"Comment">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd3f1 <String[5]: e"Share">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd411 <String[5]: e"Share">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd431 <String[7]: e"Amy Lee">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd451 <String[7]: e"Amy Lee">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd471 <String[5]: e"Reply">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd491 <String[5]: e"Reply">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd4b1 <String[3]: e"38w">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd4d1 <String[3]: e"38w">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd4f1 <String[7]: e"Amy Lee">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd511 <String[7]: e"Amy Lee">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd531 <String[5]: e"Reply">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd551 <String[5]: e"Reply">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd571 <String[3]: e"38w">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd591 <String[3]: e"38w">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd5b1 <String[16]: ue"Write a comment&">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd5d1 <String[16]: ue"Write a comment&">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd5f1 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd611 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd631 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd651 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd671 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd691 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd6b1 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd6d1 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd6f1 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd711 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd731 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd751 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd771 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cd791 <String[8]: e"Facebook">
** In function 0x710002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x005e477cfb61 <String[20]: e"This is a rainy day!">
** In function 0x710002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661f3249 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661f3219 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661f4cc9 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661f4c99 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661f6749 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661f6719 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661f81c9 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661f8199 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661f9c49 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661f9c19 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661fb6c9 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661fb699 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3135661fd149 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3135661fd119 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e301da9 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e301d79 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e304051 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e304021 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e305ad1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e305aa1 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e307551 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e307521 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e308fd1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e308fa1 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e30aa51 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e30aa21 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e30c4d1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e30c4a1 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e30d7c1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e30d791 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e30eab1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e30ea81 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e30fda1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e30fd71 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e312ed1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e312ea1 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e314951 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e314921 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e315c41 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e315c11 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e317e51 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e317e21 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e3198d1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e3198a1 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e31b351 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e31b321 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e31c641 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e31c611 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e31d931 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e31d901 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e31ec21 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e31ebf1 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e31ff11 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e31fee1 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e3237d1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e3237a1 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e324ac1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e324a91 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e326cd1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e326ca1 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e328751 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e328721 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e329a41 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e329a11 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e32ad31 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e32ad01 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e32c021 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e32bff1 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e32f151 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e32f121 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e330bd1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e330ba1 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e332651 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e332621 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e3340d1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e3340a1 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e335b51 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e335b21 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e336e41 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e336e11 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e339051 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e339021 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e33aad1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e33aaa1 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e33c551 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e33c521 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e33dfd1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e33dfa1 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3e177e33fa51 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3e177e33fa21 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3a9f4f382629 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3a9f4f3825f9 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3a9f4f3840a9 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3a9f4f384079 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3a9f4f385b29 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3a9f4f385af9 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3a9f4f3875a9 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3a9f4f387579 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3a9f4f389029 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3a9f4f388ff9 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3a9f4f38fb21 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3a9f4f38faf1 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3a9f4f3915a1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3a9f4f391571 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3a9f4f393021 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3a9f4f392ff1 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3a9f4f394aa1 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3a9f4f394a71 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x01caeba06669 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x01caeba06639 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x01caeba080e9 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x01caeba080b9 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x01caeba09b69 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x01caeba09b39 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x01caeba0b5e9 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x01caeba0b5b9 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x01caeba0c8d9 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x01caeba0c8a9 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x01caeba0eae9 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x01caeba0eab9 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x01caeba10569 <String[55]: "https://www.facebook.com/profile.php?id=100084859195049">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x01caeba10539 <String[8]: "Facebook">
** In function 0x710002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

