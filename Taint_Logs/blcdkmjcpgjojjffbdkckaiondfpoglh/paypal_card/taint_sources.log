>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3fecedbeaa81 <String[16]: "chrome://newtab/">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3fecedbea889 <String[7]: "New Tab">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3fecedbfb8c1 <String[16]: "chrome://newtab/">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3fecedbfb891 <String[7]: "New Tab">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3fecedbfd5a1 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3fecedbfd569 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x3fecedbff029 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x3fecedbfeff1 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba238 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from blink)
0x1c533bc6ed59 <String[61]: e"https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba1e8 ``, source code:
const ALLOW_ALL = true;
const MAX_DEPTH = 0;

var allowed_sites = [];
var prohibit_tag = ["script", "style", "noscript"];
var delim = '`!@!$`';

var eList = [];
var eListContent = [];

var cwTexts = [];
var cwScores = [];
var cwSentences = [];

var gResults = [];

function allowed(str) {
    if (ALLOW_ALL) {
        return true;
    }

    for (var i = 0; i < allowed_sites.length; i++)
        if (str.toLowerCase().includes(allowed_sites[i].toLowerCase()))
            return true;

    return false;
}

function prohibited(str) {
    for (var i=0; i<prohibit_tag.length; i++) {
        if (str.toLowerCase().includes(prohibit_tag[i].toLocaleString()))
            return true;
    }
    return false;
}

function count_maximum_depth(el) {
    var ret = 0;
    if (prohibited(el.tagName)) ret = 100; // arbitrary large number

    var c = el.children;
    for (var i=0; i<c.length; i++) {
        ret = Math.max(count_maximum_depth(c[i]) + 1, ret);
    }

    return ret;
}

function createCORSRequest(method, url, api_key=null) {
    var xhr = new XMLHttpRequest();
    xhr.open(method, url);
    if (method == "POST") {
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
    }
    return xhr;
}

function applyClaimSpottingAPI(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}

function applyGoogleAPI() {
    var url = "https://idir.uta.edu/misinfo-api/query_google";

    var tot = "";
    for (var i=0; i<cwSentences.length; i++) {
        tot += cwSentences[i];
        if (i < cwSentences.length - 1) tot += "$&@!@&!*";
    }
    
    var xhr = createCORSRequest('POST', url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }
  
    xhr.onload = function() {
        gResults = JSON.parse(xhr.responseText);

        var retIdx = 0;
        for (var i = 0; i < cwScores.length; i++) {
            var curHTML = eListContent[i];
            for (var j = 0; j < cwScores[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                var curRes = gResults[retIdx++];

                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);

                var startColor = (curRes.empty ? "fce3ec" : "00ff66");
                var endColor = (curRes.empty ? "ffe8cc" : "00d4ff");
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#" + startColor + tCode + "), to(#" + endColor + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";

                var tooltipHTML = '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%';

                if (!curRes.empty) {
                    var googleFcURL = "https://toolbox.google.com/factcheck/explorer/search/" + fixedEncodeURIComponent(cwTexts[i][j]) + ";hl=en";
                    tooltipHTML = '<a target="_blank" href="' + googleFcURL + '">' + tooltipHTML + '. Click me to see relevant fact-checks!</span>' + '</a>';
                } else {
                    tooltipHTML += '</span>';
                }

                newHTML = '<div class="tooltip-vericlaim">' + newHTML + tooltipHTML + '</div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }
    };
  
    xhr.onerror = function() {
        console.log('There was an error making the request');
    };
  
    xhr.send(tot);
}

function processClaimCheckingResults(csListener, badgeLenListener) {
    if (gResults.length != cwSentences.length) {
        setTimeout(processClaimCheckingResults, 200, csListener, badgeLenListener);
        return;
    }

    console.log(gResults);

    var ccListener = function (msg, sender, response) {
        if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
            response({
                id: '200-cc',
                cwSentences: cwSentences,
                gResults: gResults
            });
        }
    }
    chrome.runtime.onMessage.removeListener(csListener);
    chrome.runtime.onMessage.addListener(ccListener);

    var badgeLenCcListener = function (msg, sender, response) {
        if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
            response({
                id: "200-cc",
                content: cwSentences.length
            });
        }
    }
    chrome.runtime.onMessage.removeListener(badgeLenListener);
    chrome.runtime.onMessage.addListener(badgeLenCcListener);
}

var threshold;
var viewmode;

chrome.storage.sync.get(['threshold'], function(result) {
    if (result.threshold == undefined) {
        chrome.storage.sync.set({threshold: 0.6}, function() {});
        threshold = 0.6;
    } else {
        threshold = result.threshold;
    }
});

function get_candidate_claims(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}

if (allowed(document.URL)) {
    console.log("COKN Health Info Check will operate on this site")

    respondLoading = function(msg, sender, response) {
        if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
            response({
                id: 'loading-cs',
                cwSentences: [],
                gResults: []
            });
        }
    }
    chrome.runtime.onMessage.addListener(respondLoading);

    var badgeLenLoading = function (msg, sender, response) {
        if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
            response({
                id: "-1",
                content: []
            });
        }
    }
    chrome.runtime.onMessage.addListener(badgeLenLoading);

    var style = document.createElement('style');
    style.innerHTML = `
    claim {
        -webkit-box-decoration-break: clone;
        box-decoration-break: clone;
        border-radius: .4em;
        padding-left: .15em;
        padding-right: .15em;
        padding-top: .05em;
        padding-bottom: .05em;
        color: black;
    }
    /* Tooltip container */
    .tooltip-vericlaim {
        position: relative;
        display: inline;
    }

    /* Tooltip text */
    .tooltip-vericlaim .tooltiptext-vericlaim {
        visibility: hidden;
        width: 20em;
        background-color: black;
        color: #fff;
        text-align: center;
        padding: 5px 0;
        border-radius: 6px;
        font-size: 10pt;
        font-weight: bold;
        
        /* Position the tooltip text - see examples below! */
        position: absolute;
        z-index: 9999;
    }

    /* Show the tooltip text when you mouse over the tooltip container */
    .tooltip-vericlaim:hover .tooltiptext-vericlaim {
        visibility: visible;
    }
    `;

    // style.innerHTML = `
    // .has-tooltip {
    //     /*position: relative;*/
    //     display: inline;
    // }
    // .tooltip-wrapper {
    //     position: absolute;
    //     visibility: hidden;
    // }
    // .has-tooltip:hover .tooltip-wrapper {
    //     visibility: visible;
    //     opacity: 0.7;
    //     /*top: 30px;*/
    //     /*left: 50%;*/
    //     /*margin-left: -76px;*/
    //     z-index: 9999;
    // }
    
    // .tooltip {
    //     display: block;
    //     position: relative;
    //     top: 2em;
    //     right: 100%;
    //     width: 140px;
    //     height: 96px;
    //     /*margin-left: -76px;*/
    //     color: #FFFFFF;
    //     background: #000000;
    //     line-height: 96px;
    //     text-align: center;
    //     border-radius: 8px;
    //     box-shadow: 4px 3px 10px #800000;
    // }
    // .tooltip:after {
    //     content: '';
    //     position: absolute;
    //     bottom: 100%;
    //     left: 50%;
    //     margin-left: -8px;
    //     width: 0;
    //     height: 0;
    //     border-bottom: 8px solid #000000;
    //     border-right: 8px solid transparent;
    //     border-left: 8px solid transparent;
    // }    
    // `

    document.head.appendChild(style);

    eList = get_candidate_claims(document.body.querySelectorAll('*:not(style):not(script):not(noscript)'));
    applyClaimSpottingAPI(respondLoading, badgeLenLoading);
} else {
    chrome.runtime.onMessage.addListener((msg, sender, response) => {
        if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
            response({
                id: 'not-support',
                cwSentences: [],
                gResults: []
            });
        }
    });
}

function fixedEncodeURIComponent(str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return '%' + c.charCodeAt(0).toString(16);
    });
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef10649b9 <String[14]: e"PayPal balance">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064a21 <String[14]: e"PayPal balance">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064a41 <String[5]: e"$0.00">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064a61 <String[5]: e"$0.00">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064a81 <String[9]: e"Available">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064aa1 <String[9]: e"Available">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064ac1 <String[4]: e"Visa">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064ae1 <String[4]: e"Visa">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064b01 <String[6]: ue"""2143">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064b21 <String[6]: ue"""2143">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064b41 <String[9]: e"PREFERRED">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064b61 <String[9]: e"PREFERRED">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064ba1 <String[6]: ue"""2143">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064bc1 <String[6]: ue"""2143">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064be1 <String[18]: ue"Visa Credit ""2143">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064c01 <String[18]: ue"Visa Credit ""2143">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064c21 <String[18]: e"Give it a nickname">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064c41 <String[18]: e"Give it a nickname">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064c61 <String[29]: ue"This card is about to expire.">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064c81 <String[29]: ue"This card is about to expire.">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064ca1 <String[15]: e"Expiration date">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064cc1 <String[15]: e"Expiration date">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064ce1 <String[7]: e"08/2023">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064d01 <String[7]: e"08/2023">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064d21 <String[15]: e"Billing address">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064d41 <String[15]: e"Billing address">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064d61 <String[5]: ue"\x6d59\x6c5f \x7ecd\x5174">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064d81 <String[5]: ue"\x6d59\x6c5f \x7ecd\x5174">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064da1 <String[14]: ue"\x8d8a\x57ce\x533a\x76db\x4e16\x540d\x82d100\x5e620120">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064dc1 <String[14]: ue"\x8d8a\x57ce\x533a\x76db\x4e16\x540d\x82d100\x5e620120">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064de1 <String[6]: e"143210">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064e01 <String[6]: e"143210">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064e21 <String[28]: e"Preferred when paying online">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064e41 <String[28]: e"Preferred when paying online">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064e61 <String[6]: e"Change">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064e81 <String[6]: e"Change">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064ea1 <String[69]: ue"We\x2019ll use this when you shop or send payments for goods and services.">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064ec1 <String[69]: ue"We\x2019ll use this when you shop or send payments for goods and services.">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064ee1 <String[30]: e"More about payment preferences">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064f01 <String[30]: e"More about payment preferences">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064f21 <String[11]: e"Update card">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064f41 <String[11]: e"Update card">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064f61 <String[11]: e"Remove card">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1064f81 <String[11]: e"Remove card">
** In function 0x1f04002ba1f8 `get_candidate_claims`, source code:
(els) {
    var ret = []

    for (var i = 0; i < els.length; i++) {
        el = els[i];
        max_depth = count_maximum_depth(el);

        if (max_depth > MAX_DEPTH) continue;
        if (typeof el.innerText == 'undefined') continue;
        txt = el.innerText.trim();
        if (txt.split(' ').length < 5) continue;

        // ret.push(txt);
        ret.push(el);
    }
    
    return ret;
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef10675c1 <String[29]: ue"This card is about to expire.">
** In function 0x1f04002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from blink)
0x0f7ef1067661 <String[69]: ue"We\x2019ll use this when you shop or send payments for goods and services.">
** In function 0x1f04002ba1f8 `applyClaimSpottingAPI`, source code:
(respondLoading, badgeLenLoading) {
    var tot = ""

    for (var i=0; i<eList.length; i++) {
        tot += eList[i].innerText.trim();
        if (i < eList.length - 1) tot += '$&@!@&!*'
    }

    var base_url = "https://idir.uta.edu/misinfo-api/query_claimbuster?rtoks=1";
        
    var xhr = createCORSRequest('POST', base_url);
    if (!xhr) {
        alert('CORS not supported');
        return;
    }

    xhr.onload = function() {
        console.log(xhr.responseText);
        var ret = JSON.parse(xhr.responseText);

        for (var i = 0; i < ret.length; i++) {
            var tmp1 = [];
            var tmp2 = [];
            for (var j = 0; j < ret[i].length; j++) {
                tmp1.push(ret[i][j][0]);
                tmp2.push(ret[i][j][1]);
            }
            cwTexts.push(tmp1);
            cwScores.push(tmp2);
        }

        for (var i = 0; i < ret.length; i++) {
            var curHTML = eList[i].innerText.trim();
            eListContent.push(curHTML);
            
            for (var j = 0; j < ret[i].length; j++) {
                if (cwScores[i][j] < threshold) continue;

                cwSentences.push(cwTexts[i][j]);
                var start = curHTML.indexOf(cwTexts[i][j]);
                var end = start + cwTexts[i][j].length;

                var decCode = Math.round(cwScores[i][j] * 255);
                var tCode = decCode.toString(16);
                var colorcode = "background: -webkit-gradient(linear, left top, right top, from(#fce3ec" + tCode + "), to(#ffe8cc" + tCode + "));";

                var newHTML = "<claim style='" + colorcode + "'>" + cwTexts[i][j] + "</claim>";
                newHTML = '<div class="tooltip-vericlaim">' + newHTML + '<span class="tooltiptext-vericlaim">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></div>';
                // newHTML = '<div class="has-tooltip">' + newHTML + '<span class="tooltip-wrapper"><span class="tooltip">Check-Worthiness Score: ' + (cwScores[i][j] * 100).toFixed(2) + '%. See extension for details.</span></span></div>';

                curHTML = curHTML.substring(0, start) + newHTML + curHTML.substring(end);
            }
            eList[i].innerHTML = curHTML;
        }

        var csListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'DOMInfo')) {
                response({
                    id: '200-cs',
                    cwSentences: cwSentences,
                    gResults: []
                });
            }
        }
        chrome.runtime.onMessage.removeListener(respondLoading);
        chrome.runtime.onMessage.addListener(csListener);
    
        var badgeLenListener = function (msg, sender, response) {
            if ((msg.from === 'popup') && (msg.subject === 'badgeInfo')) {
                response({
                    id: "200-cs",
                    content: cwSentences.length
                });
            }
        }
        chrome.runtime.onMessage.removeListener(badgeLenLoading);
        chrome.runtime.onMessage.addListener(badgeLenListener);
    
        applyGoogleAPI();
        
        processClaimCheckingResults(csListener, badgeLenListener);
    };

    xhr.onerror = function() {
        console.log('There was an error making the request');
    };

    xhr.send(tot);
}
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128c17a1 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128c1769 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128c3271 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128c3239 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128c51e1 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128c51a9 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128c6bd9 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128c6ba1 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128c85d1 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128c8599 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128c9fc9 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128c9f91 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128cb9d1 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128cb999 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128cdc39 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128cdc01 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128cf879 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128cf841 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128d1291 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128d1259 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128d2ca9 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128d2c71 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128d46c1 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128d4689 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128d60d9 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128d60a1 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128d7af1 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128d7ab9 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128d9509 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128d94d1 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128daf21 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128daee9 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128dc999 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128dc961 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128de421 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128de3e9 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128e1321 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128e12e9 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128e2da9 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128e2d71 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128e4831 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128e47f9 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128e62b9 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128e6281 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128e7d41 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128e7d09 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128e97c9 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128e9791 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128eb251 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128eb219 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128eccd9 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128ecca1 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128ee761 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128ee729 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128f01e9 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128f01b1 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128f1c71 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128f1c39 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128f36f9 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128f36c1 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128f5181 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128f5149 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128f6c09 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128f6bd1 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128f8691 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128f8659 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128fa119 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128fa0e1 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128fbba1 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128fbb69 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128fd629 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128fd5f1 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x0c4e128ff0b1 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x0c4e128ff079 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x059c2aa81da9 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x059c2aa81d71 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x059c2aa83831 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x059c2aa837f9 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x059c2aa87309 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x059c2aa872d1 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x059c2aa895b9 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x059c2aa89581 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x059c2aa8b041 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x059c2aa8b009 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x059c2aa8cac9 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x059c2aa8ca91 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x059c2aa8e551 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x059c2aa8e519 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x059c2aa8ffd9 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x059c2aa8ffa1 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x059c2aa91a61 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x059c2aa91a29 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x059c2aa934e9 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x059c2aa934b1 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x059c2aa94f71 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x059c2aa94f39 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x059c2aa969f9 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x059c2aa969c1 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x059c2aa98481 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x059c2aa98449 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x059c2aa99f09 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x059c2aa99ed1 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x059c2aa9b991 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x059c2aa9b959 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x059c2aa9d419 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x059c2aa9d3e1 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x059c2aa9eea1 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x059c2aa9ee69 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x059c2aaa0929 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x059c2aaa08f1 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x059c2aaa23b1 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x059c2aaa2379 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x059c2aaa3e39 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x059c2aaa3e01 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x059c2aaa58c1 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x059c2aaa5889 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x059c2aaa7349 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x059c2aaa7311 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x059c2aaa8dd1 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x059c2aaa8d99 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:url)
0x059c2aaaa859 <String[61]: "https://www.paypal.com/myaccount/money/cards/CC-DNGXYXA3SUS8Q">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

>>> Taint source: (invoked from api_request_handler:tabs.query:title)
0x059c2aaaa821 <String[14]: "PayPal: Wallet">
** In function 0x1f04002ba250 ``, source code:
tabs => {
        chrome.tabs.sendMessage(
            tabs[0].id, { from: 'popup', subject: 'badgeInfo' },
            updateBadge);
    }
>>> END Taint source

